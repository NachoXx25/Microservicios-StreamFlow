name: E2E Tests - User and Auth Microservice

on:
  push:
    branches: [ "main" ]
    paths: 
      - 'UserMicroservice/**'
      - 'AuthMicroservice/**'
      - 'Nginx/**'
      - '.github/workflows/e2e-tests.yml'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'UserMicroservice/**'
      - 'AuthMicroservice/**'
      - 'Nginx/**'

jobs:
  e2e-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Create test environment file
      run: |
        cd Nginx
        cp .env .env.test

    - name: Build and start services
      run: |
        cd Nginx
        docker-compose --env-file .env.test up -d --build
        
    - name: Wait for services to be ready
      run: |
        echo "Levantando los servicios"
        sleep 30
        
        docker-compose -f Nginx/docker-compose.yml ps
        
        timeout=300
        until curl -f https://localhost:443/health || [ $timeout -eq 0 ]; do
          echo "Esperando a que la API responda ($timeout seconds left)"
          sleep 5
          timeout=$((timeout-5))
        done
        
        if [ $timeout -eq 0 ]; then
          echo "La API fall√≥"
          docker-compose -f Nginx/docker-compose.yml logs nginx
          exit 1
        fi
        
        echo "Tamos ready"

    - name: Set up Node.js for E2E tests
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Install E2E test dependencies
      run: |
        cd e2e-tests
        npm install

    - name: Run E2E Tests
      run: |
        cd e2e-tests
        npm test
      env:
        API_GATEWAY_URL: https://localhost:443
        TEST_TIMEOUT: 30000

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-test-results
        path: e2e-tests/test-results/
        
    - name: Show service logs on failure
      if: failure()
      run: |
        echo "Mostrando los logs"
        docker-compose -f Nginx/docker-compose.yml logs user-service
        docker-compose -f Nginx/docker-compose.yml logs auth-service
        docker-compose -f Nginx/docker-compose.yml logs nginx

    - name: Cleanup
      if: always()
      run: |
        cd Nginx
        docker-compose --env-file .env.test down -v
        docker system prune -f
