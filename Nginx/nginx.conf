events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Configuración de logs
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    'request_body: "$request_body"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # Configuración básica
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Configuración de buffers
    client_body_buffer_size 128k;
    client_max_body_size 100m;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;



    # Configuración de timeouts
    client_body_timeout 12;
    client_header_timeout 12;
    keepalive_requests 100;
    send_timeout 10;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml;

    # ===== UPSTREAM: BALANCEADOR DE CARGA PARA API GATEWAYS =====
    upstream api_gateways {
        # Configuración de load balancing
        least_conn;  # Algoritmo: least connections
        
        # Tus 3 API Gateways (asumiendo que corren en localhost)
        server api_gateway_1:8080 weight=1 max_fails=3 fail_timeout=40s;
        server api_gateway_2:8080 weight=1 max_fails=3 fail_timeout=40s;
        server api_gateway_3:8080 weight=1 max_fails=3 fail_timeout=40s;
        
        # Health check
        keepalive 32;
    }

    # ===== SERVIDOR HTTP (REDIRIGE A HTTPS) =====
    server {
        listen 80;
        server_name localhost;

        # Redirigir todo el tráfico HTTP a HTTPS
        return 301 https://$server_name$request_uri;
    }

    # ===== SERVIDOR HTTPS (PRINCIPAL) =====
    server {
        listen 443 ssl;
        http2 on;
        server_name localhost;

        # ===== CONFIGURACIÓN SSL =====
        ssl_certificate /etc/nginx/ssl/mycert.pem;
        ssl_certificate_key /etc/nginx/ssl/mykey.pem;
        
        # Configuración SSL moderna
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;

        # ===== CONFIGURACIÓN DE HEADERS GLOBALES =====
        # CORS Headers
        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS, PATCH" always;
        add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization" always;
        add_header Access-Control-Expose-Headers "Content-Length,Content-Range" always;

        # Security Headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

        # ===== MANEJO DE OPTIONS (CORS PREFLIGHT) =====
        location = /options-handler {
            if ($request_method = 'OPTIONS') {
                return 204;
            }
            return 405;
        }

        # Interceptar todas las peticiones OPTIONS
        location / {

            # Para todas las demás peticiones, proxy a API Gateways
            proxy_pass http://api_gateways;
            proxy_pass_request_body on;
            client_body_in_single_buffer on;
            proxy_request_buffering on;

            # Headers de proxy
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $server_name;
            
            # Configuración de timeouts
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # Configuración de buffers
            proxy_buffering on;
            proxy_buffer_size 128k;
            proxy_buffers 4 256k;
            proxy_busy_buffers_size 256k;
            
            # HTTP/1.1 para keepalive
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }

        # ===== ENDPOINT DE COMEDIA =====
        location = /comedia {
            add_header Content-Type "application/json" always;
            return 200 '{"joke": "¿Cuál es el animal más antiguo? La cebra, porque está en blanco y negro"}';
        }

        # ===== HEALTH CHECK ENDPOINT =====
        location = /nginx-health {
            access_log off;
            add_header Content-Type "text/plain" always;
            return 200 "healthy\n";
        }

        # ===== STATUS ENDPOINT =====
        location = /nginx-status {
            access_log off;
            add_header Content-Type "application/json" always;
            return 200 '{"status":"running","upstreams":3,"load_balancer":"nginx"}';
        }
    }
}